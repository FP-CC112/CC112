ProyectoOrdenamientoBusqueda/
│
├── src/                           # Carpeta de código fuente
│   ├── main.cpp                   # Archivo principal que contiene el menú y la interacción con el usuario
│   ├── ordenamiento/              # Carpeta para los algoritmos de ordenamiento
│   │   ├── ordenamiento.h         # Archivo de cabecera con las declaraciones de funciones
│   │   ├── ordenamiento.cpp       # Implementación de los algoritmos de ordenamiento
│   │
│   ├── busqueda/                  # Carpeta para los algoritmos de búsqueda
│   │   ├── busqueda.h             # Archivo de cabecera con las declaraciones de funciones
│   │   ├── busqueda.cpp           # Implementación de los algoritmos de búsqueda
│   
├── README.md                      # Archivo README con la explicación del proyecto
└── Makefile                       # Opcional: Archivo para facilitar la compilación


#ifndef ORDENAMIENTO_H
#define ORDENAMIENTO_H

// Funciones de ordenamiento
void burbuja(int arr[], int n);
void seleccion(int arr[], int n);
void insercion(int arr[], int n);
void mergeSort(int arr[], int left, int right);
void quickSort(int arr[], int low, int high);

#endif




#include "ordenamiento.h"
#include <iostream>

// Implementación del algoritmo de ordenamiento por burbuja
void burbuja(int arr[], int n) {
    for (int i = 0; i < n - 1; ++i) {
        for (int j = 0; j < n - 1 - i; ++j) {
            if (arr[j] > arr[j + 1]) {
                std::swap(arr[j], arr[j + 1]);
            }
        }
    }
}

// Aquí irían las implementaciones de otros algoritmos: selección, inserción, merge sort, quick sort…


#ifndef BUSQUEDA_H
#define BUSQUEDA_H

// Funciones de búsqueda
int busquedaLineal(int arr[], int n, int key);
int busquedaBinaria(int arr[], int left, int right, int key);

#endif



#include "busqueda.h"
#include <iostream>

// Implementación de la búsqueda lineal
int busquedaLineal(int arr[], int n, int key) {
    for (int i = 0; i < n; ++i) {
        if (arr[i] == key) {
            return i; // Retorna el índice donde se encuentra el valor
        }
    }
    return -1; // Si no se encuentra, retorna -1
}

// Implementación de la búsqueda binaria
int busquedaBinaria(int arr[], int left, int right, int key) {
    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (arr[mid] == key) {
            return mid; // Valor encontrado
        }
        if (arr[mid] < key) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return -1; // Valor no encontrado
}



# Proyecto de Algoritmos de Ordenamiento y Búsqueda en C++

## Descripción

Este proyecto tiene como objetivo implementar y demostrar los principales algoritmos de ordenamiento y búsqueda en C++. El programa ofrece un menú interactivo donde el usuario puede seleccionar y ejecutar diferentes algoritmos de ordenamiento (como Burbuja, Selección, Inserción, Merge Sort y Quick Sort) y búsqueda (Búsqueda Lineal y Búsqueda Binaria).

El proyecto está estructurado de forma modular, dividiendo el código en funciones y distribuyéndolo en varios archivos para mejorar la organización, reutilización y mantenimiento del código.

## Estructura del Proyecto

El proyecto está organizado de la siguiente manera:

- **`src/`**: Contiene el código fuente organizado en varias carpetas.
  - **`ordenamiento/`**: Implementación de los algoritmos de ordenamiento.
  - **`busqueda/`**: Implementación de los algoritmos de búsqueda.
  - **`main.cpp`**: El archivo principal que interactúa con el usuario y permite seleccionar los algoritmos a ejecutar.
  
- **`README.md`**: Este archivo con la documentación del proyecto.
- **`Makefile`** (opcional): Si deseas utilizar un Makefile para facilitar la compilación.

## Instrucciones de Uso

1. Clona este repositorio en tu máquina local:
   ```bash
   git clone <URL_DEL_REPOSITORIO>

2. Abre la terminal en la carpeta del proyecto y compila el programa:

g++ src/main.cpp src/ordenamiento/ordenamiento.cpp src/busqueda/busqueda.cpp -o proyectoOrdenamientoBusqueda


3. Ejecuta el programa:

./proyectoOrdenamientoBusqueda


4. Interactúa con el menú para seleccionar el algoritmo que deseas ejecutar.








---

### **Makefile (opcional)**

Si deseas automatizar la compilación, puedes crear un archivo `Makefile` con el siguiente contenido:

```makefile
CXX = g++
CXXFLAGS = -std=c++11 -Wall

SRC = src/main.cpp src/ordenamiento/ordenamiento.cpp src/busqueda/busqueda.cpp
OBJ = $(SRC:.cpp=.o)
EXEC = proyectoOrdenamientoBusqueda

all: $(EXEC)

$(EXEC): $(OBJ)
	$(CXX) $(OBJ) -o $(EXEC)

%.o: %.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

clean:
	rm -f $(OBJ) $(EXEC)



Con esto, podrás compilar tu proyecto simplemente ejecutando el siguiente comando:
make


Y eliminar los archivos objeto y el ejecutable con:
make clean






Si deseas utilizar CMake para gestionar la compilación de tu proyecto en lugar de un Makefile, puedes crear un archivo CMakeLists.txt que se encargue de compilar y enlazar tu código. CMake es una herramienta más flexible y ampliamente utilizada, especialmente para proyectos más grandes o cuando trabajas en entornos con distintas plataformas (Windows, Linux, macOS).

A continuación, te muestro cómo configurar tu proyecto para usar CMake:

ProyectoOrdenamientoBusqueda/
│
├── src/                           # Carpeta de código fuente
│   ├── main.cpp                   # Archivo principal que contiene el menú y la interacción con el usuario
│   ├── ordenamiento/              # Carpeta para los algoritmos de ordenamiento
│   │   ├── ordenamiento.h         # Archivo de cabecera con las declaraciones de funciones
│   │   ├── ordenamiento.cpp       # Implementación de los algoritmos de ordenamiento
│   │
│   ├── busqueda/                  # Carpeta para los algoritmos de búsqueda
│   │   ├── busqueda.h             # Archivo de cabecera con las declaraciones de funciones
│   │   ├── busqueda.cpp           # Implementación de los algoritmos de búsqueda
│
├── CMakeLists.txt                 # Archivo de configuración de CMake
├── README.md                      # Archivo README con la explicación del proyecto
└── build/                         # Carpeta para los archivos de construcción generados por CMake



Contenido de CMakeLists.txt
El archivo CMakeLists.txt es donde defines las opciones de compilación y los archivos fuente de tu proyecto. Aquí está un ejemplo de un archivo CMakeLists.txt básico para tu proyecto:


# Establecer la versión mínima de CMake requerida
cmake_minimum_required(VERSION 3.10)

# Establecer el nombre del proyecto
project(ProyectoOrdenamientoBusqueda)

# Definir el estándar de C++ que queremos usar (C++11)
set(CMAKE_CXX_STANDARD 11)

# Definir las rutas a los directorios donde se encuentran los archivos fuente y encabezados
include_directories(src/ordenamiento src/busqueda)

# Agregar los archivos fuente
set(SOURCE_FILES
    src/main.cpp
    src/ordenamiento/ordenamiento.cpp
    src/busqueda/busqueda.cpp
)

# Crear el ejecutable
add_executable(proyectoOrdenamientoBusqueda ${SOURCE_FILES})



Instrucciones para Compilar con CMake

1. Clona el repositorio (si no lo has hecho ya):
git clone <URL_DEL_REPOSITORIO>

2. Crea un directorio de construcción (es importante que los archivos de compilación se generen fuera de tu código fuente para mantener el proyecto organizado):

cd ProyectoOrdenamientoBusqueda
mkdir build
cd build


3. Ejecuta CMake para generar los archivos de compilación:
cmake ..

Esto le indicará a CMake que busque el archivo CMakeLists.txt en el directorio padre (..) y genere los archivos de construcción en el directorio build.

4 Compila el proyecto:
Una vez que CMake haya generado los archivos de construcción, puedes compilar el proyecto con el siguiente comando:
make

5. Ejecuta el programa:

Después de compilar, el ejecutable estará disponible en el directorio build. Puedes ejecutarlo con:
./proyectoOrdenamientoBusqueda

6. Limpiar los archivos de construcción (opcional):

Si deseas limpiar los archivos de construcción generados por CMake, puedes hacerlo con el siguiente comando dentro del directorio build:

make clean



Detalles de la Configuración de CMake


cmake_minimum_required(VERSION 3.10): Establece la versión mínima de CMake que se necesita para poder compilar el proyecto. En este caso, es la versión 3.10.

project(ProyectoOrdenamientoBusqueda): Define el nombre del proyecto que CMake utilizará para generar los archivos de construcción.

set(CMAKE_CXX_STANDARD 11): Define el estándar de C++ que se usará para compilar el proyecto. Aquí se especifica C++11, pero puedes cambiarlo a una versión más reciente si lo prefieres (por ejemplo, C++14, C++17, C++20).

include_directories(src/ordenamiento src/busqueda): Esta línea le indica a CMake que los archivos de encabezado (.h) se encuentran en las carpetas src/ordenamiento y src/busqueda.

set(SOURCE_FILES ...): Aquí se listan todos los archivos fuente (.cpp) que se compilarán. Esto incluye los archivos de los algoritmos de ordenamiento y búsqueda, además del archivo principal (main.cpp).

add_executable(proyectoOrdenamientoBusqueda ${SOURCE_FILES}): Esta línea crea el ejecutable a partir de los archivos fuente listados en SOURCE_FILES.




